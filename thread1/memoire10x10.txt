
La mémoire 10x10 est étendue par rapport à la mémoire des autres grilles.

En effet chaque case doit connaître l'ensemble de sa ligne et de sa colonne.

Les 15 premières valeurs de la mémoire reste identique, nous allons ajouter 36 valuers :
-9 en haut -> Mem[15] & Mem[16] & Mem[17] & Mem[18] & Mem[19] & Mem[20] & Mem[21] & Mem[22] & Mem[23]
-9 à droite -> Mem[24] & Mem[25] & Mem[26] & Mem[27] & Mem[28] & Mem[29] & Mem[30] & Mem[31] & Mem[32]
-9 en bas -> Mem[33] & Mem[34] & Mem[35] & Mem[36] & Mem[37] & Mem[38] & Mem[39] & Mem[40] & Mem[41]
-9 à gauche -> Mem[42] & Mem[43] & Mem[44] & Mem[45] & Mem[46] & Mem[47] & Mem[48] & Mem[49] & Mem[50]


Logique de résolution : 

1er étape vérifier si on a 4 1 ou 0 dans la ligne/colonne, si oui 

On va vérifier si dans les lignes ou colonne  il y a exactement 3 -1 dont notre case, donc 2 -1

Mem_lignes : [24,25,26,27,28,29,30,31,32,42,43,44,45,46,47,48,49,50]
Mem_colonnes : [15,16,17,18,19,20,21,22,23,33,34,35,36,37,38,39,40,41]
#On crée une nouvelle liste pour stocker les indices ayant un -1 
indices =[]
#on travail sur la ligne
if Mem_resolution[9] ==4 or Mem_resolution[10] ==4:
    for i in Mem_lignes :
        if Mem_resolution[i] == -1 :
            indices.append(i)
    indices_0 = [24,42]
    valeur = 0
    num_final = 0
    
    if len(indices)==2 :
        for num in indices_0 :
            if num in indices :
                valeur +=1
                num_final = num
                indices.remove(num)
                
            print(num)
        if valeur == 1 :
            #case a ecrire
            if 24 <= indices[0] <= 32 :
                row_bis2 = Mem_resolution[13]
                col_bis2 = Mem_resolution[14]+(indices[0]-23)
            elif 42 <= indices[0] <= 50 :
                row_bis2 = Mem_resolution[13]
                col_bis2 = Mem_resolution[14]-(indices[0]-23) 
            if num_final == 24 :
                #dans le cas ou on a 4 1
                if Mem_resolution[9] ==4 and (Mem_resolution[3] ==0 or Mem_resolution[8] ==0):                    
                    etat_partage.grid_values2[row_bis2][col_bis2] = 0
                    etat_partage.debug.append(("condition 11",row_bis2,col_bis2,0, "Mem :", Mem_resolution))
                    #dans le cas ou on a 4 0
                elif  Mem_resolution[10] ==4 and (Mem_resolution[3] ==1 or Mem_resolution[8] ==1):                     
                    etat_partage.grid_values2[row_bis2][col_bis2] = 1
                    etat_partage.debug.append(("condition 11",row_bis2,col_bis2,1, "Mem :", Mem_resolution))
            elif num_final == 42 :
                #dans le cas ou on a 4 1
                if Mem_resolution[9] ==4 and (Mem_resolution[4] ==0 or Mem_resolution[7] ==0):
                    etat_partage.grid_values2[row_bis2][col_bis2] = 0
                    etat_partage.debug.append(("condition 11",row_bis2,col_bis2,0, "Mem :", Mem_resolution))
                #dans le cas ou on a 4 0
                elif  Mem_resolution[10] ==4 and (Mem_resolution[4] ==1 or Mem_resolution[7] ==1):
                    etat_partage.grid_values2[row_bis2][col_bis2] = 1
                    etat_partage.debug.append(("condition 11",row_bis2,col_bis2,1, "Mem :", Mem_resolution))
                    
#on travail sur la colonne
elif Mem_resolution[11] ==4 or Mem_resolution[12] ==4:
    for i in Mem_colonnes :
        if Mem_resolution[i] == -1 :
            indices.append(i)
    indices_0 = [15,33]
    valeur = 0
    num_final = 0
    
    if len(indices)==2 :
        for num in indices_0 :
            if num in indices :
                valeur +=1
                num_final = num
                indices.remove(num)
                
            print(num)
        if valeur == 1 :
            #case a ecrire
            if 15 <= indices[0] <= 23 :
                row_bis2 = Mem_resolution[13]-(indices[0]-14)
                col_bis2 = Mem_resolution[14]
            elif 33 <= indices[0] <= 41 :
                row_bis2 = Mem_resolution[13]+(indices[0]-32)
                col_bis2 = Mem_resolution[14] 
            if num_final == 15 :
                #dans le cas ou on a 4 1
                if Mem_resolution[11] ==4 and (Mem_resolution[1] ==0 or Mem_resolution[6] ==0):                    
                    etat_partage.grid_values2[row_bis2][col_bis2] = 0
                    etat_partage.debug.append(("condition 11",row_bis2,col_bis2,0, "Mem :", Mem_resolution))
                    #dans le cas ou on a 4 0
                elif  Mem_resolution[12] ==4 and (Mem_resolution[1] ==1 or Mem_resolution[6] ==1):                     
                    etat_partage.grid_values2[row_bis2][col_bis2] = 1
                    etat_partage.debug.append(("condition 11",row_bis2,col_bis2,1, "Mem :", Mem_resolution))
            elif num_final == 33 :
                #dans le cas ou on a 4 1
                if Mem_resolution[11] ==4 and (Mem_resolution[2] ==0 or Mem_resolution[5] ==0):
                    etat_partage.grid_values2[row_bis2][col_bis2] = 0
                    etat_partage.debug.append(("condition 11",row_bis2,col_bis2,0, "Mem :", Mem_resolution))
                #dans le cas ou on a 4 0
                elif  Mem_resolution[12] ==4 and (Mem_resolution[2] ==1 or Mem_resolution[5] ==1):
                    etat_partage.grid_values2[row_bis2][col_bis2] = 1
                    etat_partage.debug.append(("condition 11",row_bis2,col_bis2,1, "Mem :", Mem_resolution))   
            